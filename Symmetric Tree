/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    bool checkSymmetric(TreeNode *leftChild, TreeNode *rightChild)
    {
        if(!leftChild && !rightChild)
        {
            return true;
        }
        if(!leftChild || !rightChild)
        {
            return false;
        }
        if(leftChild->val != rightChild->val)
        {
            return false;
        }

        bool checkSym1 = checkSymmetric(leftChild->left, rightChild->right);
        bool checkSym2 = checkSymmetric(leftChild->right, rightChild->left);

        if(checkSym1 && checkSym2)
        {
            return true;
        }
        return false;
    }
    bool isSymmetric(TreeNode* root) {
        if(!root)
        {
            return true;
        }
        return checkSymmetric(root->left, root->right);
    }
};
